# --- Stage 1: Builder ---
# This stage is used to install all dependencies (including dev) and build the application.
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install libc6-compat for compatibility on Alpine
RUN apk add --no-cache libc6-compat

# --- ADD SYSTEM DEPENDENCIES FOR SHARP HERE ---
# Install necessary system libraries and build tools for sharp to compile correctly on Alpine.
RUN apk add --no-cache vips-dev build-base git

# Copy package.json and lock file(s)
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# Install dependencies
RUN if [ -f yarn.lock ]; then echo "Installing with yarn..."; yarn install --frozen-lockfile; elif [ -f package-lock.json ]; then echo "Installing with npm ci..."; npm ci; elif [ -f pnpm-lock.yaml ]; then echo "Installing with pnpm..."; corepack enable pnpm && pnpm install --frozen-lockfile; else echo "Lockfile not found. Using npm install fallback (not recommended)."; npm install; fi

# Copy source code
COPY . .

# Set NODE_ENV for build process
ENV NODE_ENV production

# Build the Payload application using your build script
# This should generate the production files (e.g., in ./build)
RUN if [ -f yarn.lock ]; then echo "Building with yarn..."; yarn run build; elif [ -f package-lock.json ]; then echo "Building with npm..."; npm run build; elif [ -f pnpm-lock.yaml ]; then echo "Building with pnpm..."; pnpm run build; else echo "Building with npm (fallback)..."; npm run build; fi


# --- Stage 2: Runner ---
# This stage is for the final, lightweight production image.
FROM node:20-alpine AS runner

# Set working directory
WORKDIR /app

# Install production dependencies
COPY --from=builder /app/package.json ./package.json
RUN if [ -f /app/yarn.lock ]; then echo "Installing production dependencies with yarn..."; yarn install --production --frozen-lockfile; elif [ -f /app/package-lock.json ]; then echo "Installing production dependencies with npm..."; npm install --production --immutable --ignore-scripts; elif [ -f /app/pnpm-lock.yaml ]; then echo "Installing production dependencies with pnpm..."; corepack enable pnpm && pnpm install --prod --frozen-lockfile; else echo "Installing production dependencies with npm (fallback)..."; npm install --production; fi

# Copy build output from the builder stage
# *** CRUCIAL: This copies the 'build' folder generated by 'npm run build' ***
COPY --from=builder /app/build ./build

# Optional: Copy your public directory if needed (if not handled by Payload uploads)
# COPY --from=builder /app/public ./public

# Set environment variables
ENV NODE_ENV production
ENV PORT 3000

# Optional: Create a non-root user for security (Recommended)
# RUN addgroup --system --gid 1001 nodejs \
#     && adduser --system --uid 1001 --shell /bin/sh --no-create-home -G nodejs nodejs
# RUN chown -R nodejs:nodejs /app
# USER nodejs

# Expose the port
EXPOSE 3000

# Command to start the application using the compiled server file
# *** CRUCIAL: This points to the compiled server file in the 'build' folder ***
CMD [ "node", "build/server.js" ]

# Alternative using npm/yarn/pnpm start script (if your start script is 'node build/server.js')
# CMD [ "npm", "start" ]