# Dockerfile
# Based on Payload/Next.js standalone Dockerfile, adapted for pnpm and sharp

# --- Stage 1: Builder ---
# This stage is used to install all dependencies (including dev) and build the application.
FROM node:20-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Install libc6-compat for compatibility on Alpine
RUN apk add --no-cache libc6-compat

# --- ADD SYSTEM DEPENDENCIES FOR SHARP HERE ---
# Install necessary system libraries and build tools for sharp to compile correctly on Alpine.
# Install these *before* copying package.json and installing dependencies.
RUN apk add --no-cache vips-dev build-base git

# Copy package.json and lock file(s) *after* adding system dependencies
# Use pnpm-lock.yaml since you use pnpm
COPY package.json pnpm-lock.yaml* ./

# Install dependencies using pnpm *after* system dependencies and lock file are copied
RUN corepack enable pnpm && pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Set NODE_ENV for build process
ENV NODE_ENV production

# Execute the build script using pnpm
RUN pnpm run build

# --- Stage 2: Runner ---
# This stage is for the final, lightweight production image.
# Start from the builder stage to reuse node_modules and build artifacts
FROM builder AS runner

# Set the working directory
WORKDIR /app

# Install libc6-compat in the runner stage (may be needed by native modules at runtime)
RUN apk add --no-cache libc6-compat

# No need to reinstall production dependencies if starting FROM builder

# Set environment variables for production runtime
ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

# --- COPY BUILD ARTIFACTS FROM BUILDER ---
# Copy the Next.js standalone output, including .next/standalone and public
# These paths are generated by the Next.js build with output: 'standalone'
# Adjust chown user/group if you change the default user in Alpine (default is 'node')
COPY --from=builder --chown=node:node /app/.next/standalone ./
COPY --from=builder --chown=node:node /app/.next/static ./.next/static
COPY --from=builder --chown=node:node /app/public ./public/ 

# Expose the port the application listens on
EXPOSE 3000

# Render injects PORT, but setting a default is standard
ENV PORT 3000

# This command starts the Next.js standalone server.
CMD ["node", "server.js"]